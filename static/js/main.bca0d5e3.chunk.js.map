{"version":3,"sources":["components/Card.js","components/CardList.js","components/ScoreBoard.js","components/GameController.js","App.js","index.js"],"names":["Card","countries","countryCodes","index","onClick","className","e","src","alt","CardList","randNums","onCardClick","map","int","ScoreBoard","level","score","bestScore","GameController","countryRef","useRef","countryCodeRef","useState","isLoading","setIsLoading","useEffect","fetch","then","res","json","data","current","JSON","parse","stringify","Object","keys","filter","key","includes","setLevel","isClicked","setIsClicked","setScore","setBestScore","randIntsRef","size","randInts","Math","floor","random","push","prevState","length","i","j","shuffle","newState","every","prevScore","newScore","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bca0d5e3.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Card({ countries, countryCodes, index, onClick }) {\n  return (\n    // Pass back index identifier to parent component on click\n    <div className=\"card\" onClick={(e) => onClick(index)}>\n      <img\n        src={`https://flagcdn.com/${countryCodes[index]}.svg`}\n        alt={`${countries[countryCodes[index]]}`}\n      />\n\n      <span>{countries[countryCodes[index]]}</span>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Card from \"./Card\";\n\nexport default function CardList({\n  countries,\n  countryCodes,\n  randNums,\n  onCardClick,\n}) {\n  return (\n    <div className=\"card-list\">\n      {randNums.map((int) => {\n        return (\n          <Card\n            key={int}\n            index={int}\n            onClick={onCardClick}\n            countries={countries}\n            countryCodes={countryCodes}\n          />\n        );\n      })}\n    </div>\n  );\n}\n","export default function ScoreBoard({ level, score, bestScore }) {\n  return (\n    <div className=\"score-board\">\n      <h2>Score: {score}</h2>\n      <h2>Best: {bestScore}</h2>\n      <h2>Level {level}</h2>\n    </div>\n  );\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport CardList from \"./CardList\";\nimport ScoreBoard from \"./ScoreBoard\";\n\nexport default function GameController() {\n  const countryRef = useRef();\n  const countryCodeRef = useRef();\n  const [isLoading, setIsLoading] = useState(true);\n  // Fetching and saving country data on mount\n  useEffect(() => {\n    fetch(\"https://flagcdn.com/en/codes.json\").then((res) => {\n      res.json().then((data) => {\n        countryRef.current = JSON.parse(JSON.stringify(data));\n        countryCodeRef.current = Object.keys(countryRef.current).filter(\n          (key) => !key.includes(\"us-\")\n        );\n        setIsLoading(false);\n      });\n    });\n  }, []);\n\n  const [level, setLevel] = useState(1);\n  const [isClicked, setIsClicked] = useState({});\n  const [score, setScore] = useState(0);\n  const [bestScore, setBestScore] = useState(0);\n  const randIntsRef = useRef([]);\n\n  const size = level * 2;\n  const randInts = randIntsRef.current;\n  // Generate random integers and setting initial click tracking state\n  useEffect(() => {\n    while (randInts.length < size) {\n      const int = Math.floor(Math.random() * 256);\n      if (!randInts.includes(int)) {\n        randInts.push(int);\n        setIsClicked((prevState) => {\n          return { ...prevState, [int]: false };\n        });\n      }\n    }\n    randIntsRef.current = randInts;\n  }, [randInts, size]);\n  // Randomize ordering of numbers in array\n  const shuffle = () => {\n    for (let i = randIntsRef.current.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      while (i === j) {\n        j = Math.floor(Math.random() * (i + 1));\n      }\n\n      [randIntsRef.current[i], randIntsRef.current[j]] = [\n        randIntsRef.current[j],\n        randIntsRef.current[i],\n      ];\n    }\n  };\n\n  const restartGame = () => {\n    randIntsRef.current = [];\n    setIsClicked({});\n    setLevel(1);\n    setScore(0);\n  };\n\n  const onCardClick = (index) => {\n    if (isClicked[index] === true) {\n      restartGame();\n      return;\n    }\n    shuffle();\n    // Set click state, check for level completion\n    setIsClicked((prevState) => {\n      const newState = { ...prevState, [index]: true };\n      const allClicked = Object.keys(newState).every(\n        (key) => newState[key] === true\n      );\n      if (allClicked) {\n        randIntsRef.current = [];\n        setIsClicked({});\n        setLevel(level + 1);\n      }\n\n      return newState;\n    });\n\n    setScore((prevScore) => {\n      const newScore = prevScore + 1;\n      if (newScore > bestScore) {\n        setBestScore(newScore);\n      }\n      return newScore;\n    });\n  };\n\n  return (\n    <main>\n      <ScoreBoard level={level} score={score} bestScore={bestScore} />\n      {!isLoading && (\n        <CardList\n          countries={countryRef.current}\n          countryCodes={countryCodeRef.current}\n          randNums={randIntsRef.current}\n          onCardClick={onCardClick}\n        />\n      )}\n    </main>\n  );\n}\n","import React from \"react\";\nimport GameController from \"./components/GameController\";\nimport \"./styles/App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Memory Master</h1>\n      <GameController />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}